{
  "meta": {
    "instanceId": "oliver-service-status-checker"
  },
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "read",
        "fileName": "./verify_setup.py",
        "options": {}
      },
      "id": "read-status-script",
      "name": "Read Status Script",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [460, 300],
      "notes": "Read the service status verification script"
    },
    {
      "parameters": {
        "command": "python",
        "arguments": ["verify_setup.py"],
        "options": {}
      },
      "id": "execute-status-check",
      "name": "Execute Status Check",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [680, 300],
      "notes": "Run the status check script"
    },
    {
      "parameters": {
        "url": "http://localhost:8002/quick-check",
        "options": {}
      },
      "id": "get-environment-status",
      "name": "Get Environment Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [900, 300],
      "notes": "Get current environment status via API"
    },
    {
      "parameters": {
        "jsCode": "// Oliver AI Agent - Service Status Analysis\nconst scriptContent = $('Read Status Script').first().json.data;\nconst statusOutput = $('Execute Status Check').first().json.stdout;\nconst envStatus = $('Get Environment Status').first().json;\n\n// Parse the verification output\nconst services = {\n  python: statusOutput.includes('‚úÖ Python') ? 'healthy' : 'error',\n  docker: statusOutput.includes('‚úÖ Docker') ? 'healthy' : 'error',\n  packages: statusOutput.includes('‚úÖ All core packages') ? 'healthy' : 'warning',\n  speech_services: statusOutput.includes('‚úÖ NVIDIA Riva speech services') ? 'healthy' : 'optional',\n  api_server: envStatus.services_running?.api_server ? 'healthy' : 'stopped',\n  n8n: envStatus.services_running?.n8n ? 'healthy' : 'stopped',\n  ollama: envStatus.services_running?.ollama ? 'healthy' : 'stopped'\n};\n\n// Generate Oliver's analysis\nconst analysis = {\n  overall_status: Object.values(services).includes('error') ? 'critical' : \n                 Object.values(services).includes('warning') ? 'warning' : 'healthy',\n  \n  services: services,\n  \n  environment_summary: {\n    type: envStatus.environment_type,\n    memory_gb: envStatus.memory_gb,\n    cpu_count: envStatus.cpu_count,\n    gpu_available: envStatus.gpu_available,\n    internet_connected: envStatus.internet_connected\n  },\n  \n  recommendations: [],\n  \n  human_readable_report: '',\n  \n  timestamp: new Date().toISOString()\n};\n\n// Generate recommendations based on status\nif (services.python === 'error') {\n  analysis.recommendations.push('üö® Python installation issue detected - check Python version');\n}\nif (services.docker === 'error') {\n  analysis.recommendations.push('üê≥ Docker not available - install Docker Desktop');\n}\nif (services.packages === 'warning') {\n  analysis.recommendations.push('üì¶ Some packages missing - run: pip install -r requirements.txt');\n}\nif (services.api_server === 'stopped') {\n  analysis.recommendations.push('üöÄ Start API server: python examples/api_server.py');\n}\nif (services.n8n === 'stopped') {\n  analysis.recommendations.push('üåê Start n8n: docker-compose up -d');\n}\nif (services.ollama === 'stopped') {\n  analysis.recommendations.push('üß† Ollama not running - start for local LLM support');\n}\n\n// Generate human-readable report\nlet report = `ü§ñ Oliver's System Status Report\\n`;\nreport += `======================================\\n\\n`;\n\nreport += `Overall Status: ${analysis.overall_status.toUpperCase()}\\n\\n`;\n\nreport += `üîç Service Status:\\n`;\nfor (const [service, status] of Object.entries(services)) {\n  const emoji = status === 'healthy' ? '‚úÖ' : status === 'warning' ? '‚ö†Ô∏è' : status === 'optional' ? 'üîß' : '‚ùå';\n  report += `  ${emoji} ${service.replace('_', ' ')}: ${status}\\n`;\n}\n\nreport += `\\nüñ•Ô∏è Environment:\\n`;\nreport += `  Type: ${analysis.environment_summary.type}\\n`;\nreport += `  Memory: ${analysis.environment_summary.memory_gb} GB\\n`;\nreport += `  CPU Cores: ${analysis.environment_summary.cpu_count}\\n`;\nreport += `  GPU: ${analysis.environment_summary.gpu_available ? 'Available' : 'Not Available'}\\n`;\nreport += `  Internet: ${analysis.environment_summary.internet_connected ? 'Connected' : 'Disconnected'}\\n`;\n\nif (analysis.recommendations.length > 0) {\n  report += `\\nüí° Recommendations:\\n`;\n  analysis.recommendations.forEach(rec => {\n    report += `  ${rec}\\n`;\n  });\n}\n\nif (analysis.overall_status === 'healthy') {\n  report += `\\nüéâ All systems operational! Ready for AI workflows.`;\n} else if (analysis.overall_status === 'warning') {\n  report += `\\n‚ö†Ô∏è System functional but could be optimized.`;\n} else {\n  report += `\\nüö® Critical issues detected - please address before proceeding.`;\n}\n\nanalysis.human_readable_report = report;\n\nreturn { json: analysis };"
      },
      "id": "oliver-analysis",
      "name": "Oliver's Status Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1120, 300],
      "notes": "Oliver AI Agent analyzes service status and provides recommendations"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "./shared/oliver-status-report.json",
        "data": "={{JSON.stringify($json, null, 2)}}",
        "options": {}
      },
      "id": "save-status-report",
      "name": "Save Status Report",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [1340, 200],
      "notes": "Save Oliver's analysis to shared folder"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "./shared/oliver-status-report.txt",
        "data": "={{$json.human_readable_report}}",
        "options": {}
      },
      "id": "save-human-report",
      "name": "Save Human-Readable Report",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [1340, 400],
      "notes": "Save human-readable report for easy viewing"
    },
    {
      "parameters": {
        "url": "http://localhost:8000/process-text",
        "method": "POST",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "text": "={{$json.human_readable_report}}",
          "operation": "summarize"
        },
        "options": {}
      },
      "id": "ai-summary",
      "name": "AI Summary",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1560, 300],
      "notes": "Generate AI summary of the status report"
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Read Status Script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Status Script": {
      "main": [
        [
          {
            "node": "Execute Status Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Status Check": {
      "main": [
        [
          {
            "node": "Get Environment Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Environment Status": {
      "main": [
        [
          {
            "node": "Oliver's Status Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Oliver's Status Analysis": {
      "main": [
        [
          {
            "node": "Save Status Report",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save Human-Readable Report",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["oliver", "status", "monitoring"],
  "triggerCount": 0,
  "updatedAt": "2025-08-03T00:00:00.000Z",
  "versionId": "1"
}
