# Use the latest n8n image as base
ARG tag=latest
FROM n8nio/n8n:$tag

# Switch to root to install packages
USER root

# Update package manager and install Python with pip
RUN apk update --no-cache && \
    apk upgrade --no-cache && \
    apk add --no-cache --virtual .build-deps \
    gcc \
    musl-dev \
    linux-headers \
    python3-dev && \
    apk add --no-cache \
    python3 \
    py3-pip \
    git \
    curl \
    bash

# Create a virtual environment and install packages
RUN python3 -m venv /opt/venv

# Install commonly used Python packages for AI/ML workflows in virtual environment
RUN /opt/venv/bin/pip install --upgrade pip && \
    /opt/venv/bin/pip install --no-cache-dir --timeout=60 \
    requests \
    fastapi \
    uvicorn \
    pydantic \
    python-dotenv \
    psutil \
    numpy \
    pandas \
    pytz && \
    apk del .build-deps

# Create wrapper scripts for natural Python access (better than symlinks for virtual environments)
RUN echo '#!/bin/sh\nexec /opt/venv/bin/python "$@"' > /usr/local/bin/python && \
    echo '#!/bin/sh\nexec /opt/venv/bin/pip "$@"' > /usr/local/bin/pip && \
    chmod +x /usr/local/bin/python /usr/local/bin/pip

# Create directories for scripts and data
RUN mkdir -p /app/scripts /app/data /app/shared

# Copy our Python scripts into the container
COPY examples/ /app/scripts/
COPY shared/ /app/shared/
COPY requirements.txt /app/
COPY run_verify.py /app/
COPY verify_setup.py /app/
COPY n8n_container_check.py /app/

# Set working directory
WORKDIR /app

# Install project-specific requirements if they exist
RUN if [ -f requirements.txt ]; then /opt/venv/bin/pip install --no-cache-dir -r requirements.txt; fi

# Switch back to node user for security
USER node

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHON_UNBUFFERED=1
ENV PYTHON_VENV=/opt/venv/bin/python
ENV PATH="/opt/venv/bin:$PATH"
